# Borrow inspiration from
# - https://github.com/rust-lang/simpleinfra/tree/master/github-actions
# - https://github.com/rust-lang/rust/blob/master/.github/workflows/ci.yml
# - https://github.com/github/semantic/blob/master/.github/workflows/haskell.yml

name: Haskell CI
on:
  push:
    branches: [$default-branch, "release-**"]
  pull_request:
    branches: [$default-branch]

defaults:
  run:
    shell: bash

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: true
      matrix:
        os: [ubuntu-latest]
        ghc: ["8.6.5", "8.8.4", "8.10.2"]
    name: GHC ${{ matrix.ghc }} - ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true

      - uses: GaloisInc/.github/actions/setup-env@v1

      - uses: actions/setup-haskell@v1
        id: setup-haskell
        with:
          ghc-version: ${{ matrix.ghc }}

      - uses: actions/cache@v2
        name: Cache cabal store
        with:
          path: |
            ${{ steps.setup-haskell.outputs.cabal-store }}
            dist-newstyle
          key: cabal-${{ runner.os }}-${{ matrix.ghc }}-${{ hashFiles('**/cabal.GHC-*') }}-${{ github.sha }}
          restore-keys: |
            cabal-${{ runner.os }}-${{ matrix.ghc }}-${{ hashFiles('**/cabal.GHC-*') }}-

      - uses: GaloisInc/.github/actions/cabal-build@v1

      - uses: GaloisInc/.github/setup-solvers@v1
        with:
          Z3: "4.8.8"
          CVC4: "4.1.8"
          YICES: "2.6.2"

      - uses: GaloisInc/.github/actions/test@v1

      - if: >-
          env.RELEASE && matrix.ghc == '8.8.4'
        run: |
          .github/ci.sh build_cryptol
          exe="$(cd deps/cryptol && cabal exec which cryptol)"
          cp "$exe" "dist/bin"

      - if: >-
          env.RELEASE && matrix.ghc == '8.8.4'
        uses: actions/upload-artifact@v2
        with:
          path: dist/bin
          name: ${{ runner.os }}-bins

      - name: Upload artifacts
        if: "matrix.os == 'ubuntu-latest'"
        uses: actions/upload-artifact@v2
        with:
          name: "saw-${{ runner.os }}-${{ matrix.ghc }}"
          path: "dist/bin/saw"

      - shell: bash
        if: "steps.test.outcome == 'failure'"
        name: Warn if tests failed
        run: echo "::error ::Test Suite Failed. Pipeline allowed to pass until tests are reliable."

  docker:
    runs-on: ubuntu-latest
    needs: [outputs]
    if: contains(needs.outputs.outputs.changed, 'Dockerfile')
    steps:
      - uses: actions/checkout@v2
      - run: |
          git submodule update --init
          git -C deps/abcBridge submodule update --init
      - uses: satackey/action-docker-layer-caching@v0.0.8
        continue-on-error: true
      - name: Publish to Registry
        uses: docker/build-push-action@v1
        with:
          repository: galoisinc/saw
          push: false

  s2n-tests:
    name: "Test s2n proofs"
    timeout-minutes: 20
    needs: build
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        s2n-target:
          - hmac
          - drbg
          - sike
          - bike
          - tls
          - hmac-failure
        ghc: ["8.6.5", "8.8.4"]
    steps:
      - uses: actions/checkout@v2
      - run: |
          mkdir -p s2nTests/bin

      - name: Download previously-built SAW
        uses: actions/download-artifact@v2
        with:
          name: "saw-Linux-${{ matrix.ghc }}"
          path: ./s2nTests/bin

      - shell: bash
        working-directory: s2nTests
        run: docker-compose pull

      - uses: satackey/action-docker-layer-caching@v0.0.8
        continue-on-error: true

      - shell: bash
        name: "s2n tests: ${{ matrix.s2n-target }}"
        working-directory: s2nTests
        run: |
          chmod +x bin/saw
          make ${{ matrix.s2n-target }}

  bundle:
    runs-on: ${{ matrix.os }}
    if: needs.outputs.outputs.release
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        ghc: ["8.8.4"]
    needs: [outputs, build]
    env:
      VERSION: ${{ needs.outputs.outputs.saw-version }}
      RELEASE: ${{ needs.outputs.outputs.release }}
    steps:
      - uses: actions/checkout@v2
      - run: |
          git submodule update --init
          git -C deps/abcBridge submodule update --init

      - uses: actions/download-artifact@v2
        with:
          path: dist/bin
          name: ${{ runner.os }}-bins

      - shell: bash
        run: .github/ci.sh bundle_files

      - shell: bash
        continue-on-error: true # temporary to test release without setting up secrets
        env:
          SIGNING_PASSPHRASE: ${{ secrets.SIGNING_PASSPHRASE }}
          SIGNING_KEY: ${{ secrets.SIGNING_KEY }}
        run: .github/ci.sh zip_dist

      - uses: actions/upload-artifact@v2
        with:
          name: ${{ needs.outputs.outputs.name }}-${{ runner.os }}-x86_64
          path: "${{ needs.outputs.outputs.name }}-${{ runner.os }}-x86_64.tar.gz*"

  release:
    needs: [outputs, bundle]
    if: needs.outputs.outputs.release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - run: |
          git submodule update --init
          git -C deps/abcBridge submodule update --init

      - uses: release-drafter/release-drafter@v5
        id: release
        with:
          version: v${{ needs.outputs.outputs.saw-version }}
          name: v${{ needs.outputs.outputs.saw-version }}
          tag: v${{ needs.outputs.outputs.saw-version }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - uses: actions/download-artifact@v2
        with:
          path: artifacts
      - name: Upload artifacts to release
        run: |
          # workaround for draft-releaser being hard to test in CI
          tag="v${VERSION}"
          body="${body:-$tag}"
          if ! hub release show "$tag"; then
            hub release create -d -m "$body" "$tag"
          fi
          assets=()
          find ./artifacts \( -name 'saw*.tar.gz*' \) -type f -print0 |
            while IFS= read -r -d '' a; do assets+=("-a" "$a"); done
          hub release edit -d "${assets[@]}" -m "" "$tag"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VERSION: ${{ needs.outputs.outputs.saw-version }}
          body: ${{ steps.release.outputs.body }}
