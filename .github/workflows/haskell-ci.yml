name: Haskell CI

defaults:
  run:
    shell: bash --noprofile --norc -euxo pipefail {0}

on:
  workflow_call:
    inputs:
      build-targets:
        description: Cabal targets to build, e.g. `lib:my-lib`.
        type: string
        required: false
        default: all
      cabal:
        description: Cabal version, e.g., "3.12.0.0"
        type: string
        required: false
        default: latest
      cache-key-prefix:
        description: |
          Prefix to add to cache key(s).

          May be used to distinguish caches for multiple packages in the same repo.
          Can also be used to force a cache miss.
        type: string
        required: false
        default: ""
      check:
        description: Whether to run `cabal check`.
        type: boolean
        required: false
        default: true
      compat:
        description: Whether to run the Cabal/GHC compatibility check.
        type: boolean
        required: false
        default: true
      compat-dirs:
        description: Directories in which to run the Cabal/GHC compatibility check, relative to the repo root.
        type: string
        required: false
        default: "."
      configure-flags:
        description: Flags to pass to `cabal configure`, e.g., `--ghc-options='-Werror=default -j'`
        type: string
        required: false
        # For an explanation of `--ghc-options='-j'` and `--semaphore`, see
        # Note [Parallelism].
        default: --ghc-options='-j' --semaphore --enable-tests --minimize-conflict-set
      fetch-depth:
        description: Number of commits to fetch. Passed to `actions/checkout`.
        type: number
        required: false
        default: 1
      ghc:
        description: GHC version, e.g., "9.10.1"
        type: string
        required: false
        default: latest
      haddock:
        description: Whether to run `cabal haddock`.
        type: boolean
        required: false
        default: true
      os:
        description: |
          Runner OS, e.g., "ubuntu-latest".

          Set this to the value of `runs-on`, *not* `runner.os`.
        type: string
        required: true
      post-hook:
        description: Shell commands to execute after the rest of the workflow.
        type: string
        required: false
        default: ""
      pre-hook:
        description: |
          Shell commands to execute before the rest of the workflow.

          Runs immediately after `actions/checkout`.
        type: string
        required: false
        default: ""
      pre-test-hook:
        description: |
          Shell commands to execute before running `cabal test`.

          Runs in the unpacked sdist (i.e., not in `$GITHUB_WORKSPACE`) if
          `inputs.sdist` is `true`.

          Useful for e.g., installing runtime dependencies for test-suites.
        type: string
        required: false
        default: ""
      sdist:
        description: |
          Whether to run `cabal sdist`.

          This will also cause later steps to be run in the unpacked sdist.
          Doing so verifies that the `.cabal` file lists the full set of files
          (data files, documentation files, etc.) necessary for the build and
          test suite.
        type: boolean
        required: false
        default: true
      sdist-targets:
        description: |
          Targets passed to `cabal sdist`.

          If not specified, defaults to all targets.
        type: string
        required: false
        default: ""
      submodules:
        description: Whether to check out submodules. Passed to `actions/checkout`.
        type: string
        required: false
        default: "false"
      test:
        description: Whether to run `cabal test`.
        type: boolean
        required: false
        default: true
      test-targets:
        description: Cabal targets to test, e.g. `test:my-tests`.
        type: string
        required: false
        default: all

# General commentary
# ------------------
#
# Steps that are less likely to fail should come later, because failing earlier
# saves time and resources. For example, `cabal check` should come after `cabal
# build`, because edits to the Cabal file are generally more rare than edits to
# Haskell source files.
#
# `cabal configure` should come before steps such as `cabal build` or `cabal
# test`, because it affects how those steps execute.
jobs:
  CI:
    runs-on: ${{ inputs.os }}
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: ${{ inputs.fetch-depth }}
        # https://github.com/actions/checkout/issues/485
        persist-credentials: false
        submodules: ${{ inputs.submodules }}
    - name: Run pre-hook
      run: ${{ inputs.pre-hook }}
    - name: Install Cabal and GHC
      uses: haskell-actions/setup@v2
      id: setup-haskell
      with:
        cabal-version: ${{ inputs.cabal }}
        ghc-version: ${{ inputs.ghc }}
    - name: Create sdist
      run: |
        if [[ "${{ inputs.sdist }}" == true ]]; then
          cabal sdist -o sdist -- ${{ inputs.sdist-targets }}
          mkdir -p unpacked
          tar -C unpacked -xzf sdist/*.tar.gz
          cd unpacked/*
        fi
        if [[ ${{ runner.os }} == Windows ]]; then
          wd="$(cmd //c cd)"
        else
          wd="$(pwd)"
        fi
        echo "WORK_DIR=${wd}" >> $GITHUB_ENV
    - name: Set project root
      run: |
        if [[ -f "${GITHUB_WORKSPACE}/cabal.project" ]]; then
          echo "PROJECT_ROOT=${GITHUB_WORKSPACE}" >> $GITHUB_ENV
        else
          echo "PROJECT_ROOT=${WORK_DIR}" >> $GITHUB_ENV
        fi
    - name: Post-GHC installation fixups on Windows
      if: runner.os == 'Windows'
      run: |
        # A workaround for https://github.com/Mistuke/CabalChoco/issues/5
        cabal user-config update -a "extra-include-dirs: \"\""
        cabal user-config update -a "extra-lib-dirs: \"\""
    - name: Configure
      run: cabal configure ${{ inputs.configure-flags }} -- ${{ inputs.build-targets }} ${{ inputs.test-targets }}
      working-directory: ${{ env.WORK_DIR }}
    # Creates `dist-newstyle/cache/plan.json` for the cache key.
    - name: Create build plan
      run: cabal build --dry-run -- ${{ inputs.build-targets }}
      working-directory: ${{ env.WORK_DIR }}
    - name: Restore Cabal store cache
      uses: actions/cache/restore@v4
      id: store-cache
      env:
        # Each `inputs.os` (e.g., `ubuntu-22.04-arm`) uniquely determines a
        # `runner.arch` (e.g., ARM64), so there is no need to include the latter
        # as part of the cache key.
        key: ${{ inputs.cache-key-prefix }}-haskell-ci-cabal-store-${{ inputs.os }}-cabal${{ steps.setup-haskell.outputs.cabal-version }}-ghc${{ steps.setup-haskell.outputs.ghc-version }}
      with:
        path: ${{ steps.setup-haskell.outputs.cabal-store }}
        # Cabal creates a build plan at `dist-newstyle/cache/plan.json`. This
        # plan contains the build configurations (e.g., flags, architecture,
        # etc.) and source hashes of all of the transitive dependencies. This
        # makes it a perfect hash key for `cabal build --only-dependencies`.
        # See https://cabal.readthedocs.io/en/3.14/nix-local-build.html.
        #
        # The `restore-key` allows for restoring the cache from a different
        # plan, which can still speed up the build if most dependencies were
        # unchanged.
        key: |
          ${{ env.key }}-${{ hashFiles(format('{0}/dist-newstyle/cache/plan.json', env.PROJECT_ROOT)) }}
        restore-keys: |
          ${{ env.key }}-
    - name: Restore Cabal build cache
      uses: actions/cache/restore@v4
      id: build-cache
      env:
        key: ${{ inputs.cache-key-prefix }}-haskell-ci-cabal-build-${{ inputs.os }}-cabal${{ steps.setup-haskell.outputs.cabal-version }}-ghc${{ steps.setup-haskell.outputs.ghc-version }}
      with:
        path: ${{ env.PROJECT_ROOT }}/dist-newstyle
        # Use `github.ref` in the key for branch-specific caching.
        #
        # The `restore-key` allows for restoring the cache from the default
        # branch (e.g., `main`) if none exists for the current branch (e.g., on
        # the first run on a new branch).
        key: |
          ${{ env.key }}-${{ github.ref }}
        restore-keys: |
          ${{ env.key }}-
    # Note [Parallelism]
    # ------------------
    #
    # We split the build into two steps:
    #
    # - Build only the dependencies. Build them in parallel at the package level
    #   (which is Cabal's default, see haskell/cabal#5776).
    # - Build this project (a single package). Use --ghc-options=-j (in the
    #   `configure` step) to build local packages' modules in parallel.
    #
    # This scheme maximizes the use of parallelism while avoiding
    # oversubscription. See GHC proposal #540 for additional background.
    #
    # We also pass `--semaphore` to `cabal configure`. This is only supported
    # on GHC >= 9.8, but Cabal simply ignores it for older compiler versions. If
    # we ever only support GHC >= 9.8, we could combine the two steps and just
    # pass `--semaphore`.
    - name: Build dependencies
      # If we had an exact cache hit, the dependencies will be up to date. This
      # step can take a few seconds even when it is a no-op, so skip it in that
      # case.
      #
      # Note [Cache key check]
      # ----------------------
      #
      # The second disjunct here *should* be superfluous. The docs for
      # `actions/cache/restore` say:
      #
      #   **Note** cache-hit will be set to true only when cache hit occurs for
      #   the exact key match. For a partial key match via restore-keys or a
      #   cache miss, it will be set to false.
      #
      # However, this appears not to be true in practice, see #31.
      if: steps.store-cache.outputs.cache-hit != 'true' || steps.store-cache.outputs.cache-primary-key != steps.store-cache.outputs.cache-matched-key
      run: cabal build --only-dependencies -- ${{ inputs.build-targets }} ${{ inputs.test-targets }}
      working-directory: ${{ env.WORK_DIR }}
    - name: Save Cabal store cache
      # See Note [Cache key check]
      if: steps.store-cache.outputs.cache-hit != 'true' || steps.store-cache.outputs.cache-primary-key != steps.store-cache.outputs.cache-matched-key
      uses: actions/cache/save@v4
      with:
        path: ${{ steps.setup-haskell.outputs.cabal-store }}
        key: ${{ steps.store-cache.outputs.cache-primary-key }}
    - name: Build
      run: cabal build -- ${{ inputs.build-targets }}
      working-directory: ${{ env.WORK_DIR }}
    - name: Run pre-test-hook
      run: ${{ inputs.pre-test-hook }}
      working-directory: ${{ env.WORK_DIR }}
    - name: Test
      run: cabal test -- ${{ inputs.test-targets }}
      working-directory: ${{ env.WORK_DIR }}
    - name: Check Hackage requirements
      run: cabal check
      if: inputs.check
      working-directory: ${{ env.WORK_DIR }}
    # Build the Haddocks to ensure that they are well formed. Somewhat
    # counterintuitively, we run this with the --disable-documentation flag. This
    # does not mean "do not build the Haddocks", but rather, "build the Haddocks
    # for the top-level library, but do not build dependencies with Haddocks".
    # The upshot is that we do not change the build configuration for any
    # dependencies, which means that we don't have to rebuild them. The downside
    # is that the rendered Haddocks won't contain any links to identifiers from
    # library dependencies. Since we are only building Haddocks to ensure well-
    # formedness, we consider this an acceptable tradeoff.
    - name: Haddock
      run: cabal haddock --disable-documentation -- ${{ inputs.build-targets }}
      if: inputs.haddock
      working-directory: ${{ env.WORK_DIR }}
    # Delete the old cache on hit to emulate a cache "update". See
    # https://github.com/actions/cache/issues/109 and
    # https://github.com/actions/cache/issues/342.
    #
    # Ideally, we would only delete and re-upload the cache if the content
    # has changed. In practice, `dist-newstyle` changes even on no-op `cabal
    # build`s. It may be possible to do better, but this workflow is reasonably
    # performant as it stands. See
    # https://github.com/GaloisInc/.github/pull/18#discussion_r2027105101
    # for discussion.
    - name: Delete old Cabal build cache
      env:
        GH_TOKEN: ${{ github.token }}
      # See Note [Cache key check]
      if: steps.build-cache.outputs.cache-hit && steps.build-cache.outputs.cache-primary-key == steps.build-cache.outputs.cache-matched-key
      run: gh cache delete -- ${{ steps.build-cache.outputs.cache-primary-key }}
    - name: Save Cabal build cache
      uses: actions/cache/save@v4
      # Always save the build cache, even if a previous step fails. (By default,
      # the `cache` action will skip saving the cache in this case.)
      if: always()
      with:
        path: ${{ env.PROJECT_ROOT }}/dist-newstyle
        key: ${{ steps.build-cache.outputs.cache-primary-key }}
    # Projects support older Cabal versions so that users can build the project
    # even if they lack access to the latest Cabal package, e.g., when using the
    # version provided by their OS package manager on older systems.
    #
    # Rather than running the whole CI workflow with multiple Cabal versions
    # (e.g., in the `matrix`), we run the equivalent of `cabal clean`, but
    # using the version of the Cabal library that is bundled with GHC. This is
    # sufficient to check that the bundled version of Cabal can parse the Cabal
    # configuration files (`.cabal`, `cabal.project{,freeze}`). This guarantees
    # that our package can be built with the versions of Cabal that are likely to
    # be available alongside the supported versions of GHC.
    #
    # We run this after `actions/cache/save` since it deletes most of
    # `dist-newstyle`.
    - name: Check Cabal/GHC compatibility
      if: inputs.compat
      run: |
        for dir in ${{ inputs.compat-dirs }}; do
          cd "${WORK_DIR}/${dir}"
          echo 'import Distribution.Simple; main = defaultMain' > Setup.hs
          runhaskell Setup.hs clean
        done
    - name: Run post-hook
      run: ${{ inputs.post-hook }}
      working-directory: ${{ env.WORK_DIR }}
